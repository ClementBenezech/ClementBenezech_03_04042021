@mixin display-flex-column-center {
  display: flex;
  flex-direction: column;
  text-align: center;
  align-items: center;
}

@mixin display-flex-row-wrap-center {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  text-align: center;
  align-items: flex-start;
  justify-content: space-around;
}

@mixin display-flex-row-center {
  display: flex;
  justify-content: center;
  width: 100vw;
  flex-direction: row;
}

@mixin display-flex-row-start-padding-left {
  display: flex;
  justify-content: start;
  width: 100vw;
  padding-left: 2 * $font-size-regular;
}

@mixin section-padding-standard($font-size) {
  padding: $font-size * 2;
}

@mixin h2-flex-start-bold {
  display: flex;
  align-self: flex-start;
  font-family: "Roboto-Bold";
}

@mixin loader-element {
  position: absolute;
  box-sizing: content-box;
  left: 0;
  right: 0;
  margin-left: auto;
  margin-right: auto;
  margin-top: 36vh;
  margin-bottom: auto;
}

/*Used to adress desktop specific layout
This mixin uses the width value defined for desktop by retrieving it from the $breakpoints map.
The @ content directive allows for custom properties to be specified in the @include in the scss class directly, making it reusable*/
@mixin desktop-only {
  @media screen and (min-width: map-get($breakpoints, desktop)) {
    @content;
  }
}

/*trying to create a generic positionning function for absolutely positionned elements in the container-result-list__result-container*/

@mixin position-absolute-top-right($top-distance, $right-distance, $index) {
  position: absolute;
  display: block;
  top: $top-distance;
  right: $right-distance;
  z-index: $index;
}

@mixin font-size-margin($font-size, $margin) {
  font-size: $font-size;
  margin: $margin $margin $margin 0px;
}

/*Step number size*/

@mixin step-number-dimension($flex, $height) {
  flex: $flex;
  height: $height;
  line-height: $height;
  border-radius: 50%;
}

/*Step content margin*/

@mixin step-content-margin($size) {
  margin: $size $size $size 0px;
}

@mixin heart-filling-effect($top, $right, $desk-top, $desk-right) {
  i {
    @include position-absolute-top-right($top, $right, $medium-index);
    @include desktop-only {
      @include position-absolute-top-right(
        $desk-top,
        $desk-right,
        $medium-index
      );
    }

    &.far {
      color: black;
      font-weight: 100;
      &:hover {
        opacity: 0;
        animation: hide-heart 0.75s forwards;
        & + i.fas {
          animation: fill-heart 1.5s forwards;
          background: linear-gradient(180deg, $color-secondary, $color-primary);
          background-clip: text;
          -webkit-background-clip: text;
          color: transparent;
        }
      }
    }

    &.fas {
      z-index: $minimum-index;
      color: transparent;
      opacity: 0;
    }
  }
}

/*make the menu item appear 1 by one inside a category
It takes an item "child index" as an argument, and applies an animation to it. 
It is called from _restaurant_pages.scss, to be nested inside the __article-container class
"For every article__container being the "nth" child of its parent (here the parent is the course container), play fade-in-grow-remove-top-margin animation"
The higher the index, the longer the animation delay. 
Child N°3 will get a delay of 2 + 0.25 * 3 =  2.75s, N°4 will get 2 + 0.25 * 4 = 3s etc etc*/

@mixin course-item-fade-in($item) {
  &:nth-child(#{$item}) {
    animation-name: fade-in-grow-remove-top-margin;
    animation-duration: 1s;
    animation-delay: #{2 + 0.25 * $item}s;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in;
  }
}

/*makes menu category appear one after another*/
@mixin course-category-fade-in($item) {
  &:nth-child(#{$item}) {
    animation-name: fade-in-grow;
    animation-duration: 1s;
    animation-delay: #{2 + 0.25 * $item}s;
    animation-fill-mode: forwards;
  }
}
