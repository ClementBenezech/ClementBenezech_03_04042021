@mixin display-flex-column-center {
  display: flex;
  flex-direction: column;
  text-align: center;
  align-items: center;
}

@mixin display-flex-row-wrap-center {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  text-align: center;
  align-items: flex-start;
  justify-content: space-around;
}

@mixin display-flex-row-center {
  display: flex;
  justify-content: center;
  width: 100vw;
  flex-direction: row;
}

@mixin display-flex-row-start-padding-left {
  display: flex;
  justify-content: start;
  width: 100vw;
  padding-left: 2 * $font-size-regular;
}

@mixin section-padding-standard($font-size) {
  padding: $font-size * 2;
}

@mixin h2-flex-start-bold {
  display: flex;
  align-self: flex-start;
  font-family: "Roboto-Bold";
}

@mixin loader-element {
  position: absolute;
  box-sizing: content-box;
  left: 0;
  right: 0;
  margin-left: auto;
  margin-right: auto;
  margin-top: 36vh;
  margin-bottom: auto;
}

/*Used to adress desktop specific layout
This mixin uses the width value defined for desktop by retrieving it from the $breakpoints map.
The @ content directive allows for custom properties to be specified in the @include in the scss class directly, making it reusable*/
@mixin desktop-only {
  @media screen and (min-width: map-get($breakpoints, desktop)) {
    @content;
  }
}

/*trying to create a generic positionning function for absolutely positionned elements in the container-result-list__result-container*/

@mixin position-absolute-top-right($top-distance, $right-distance, $index) {
  position: absolute;
  display: block;
  top: $top-distance;
  right: $right-distance;
  z-index: $index;
}

@mixin font-size-margin($font-size, $margin) {
  font-size: $font-size;
  margin: $margin $margin $margin 0px;
}

/*Step number size*/

@mixin step-number-dimension($flex, $height) {
  flex: $flex;
  height: $height;
  line-height: $height;
  border-radius: 50%;
}

/*Step content margin*/

@mixin step-content-margin($size) {
  margin: $size $size $size 0px;
}
